version: '3.8'
services:
  todo:
    networks:
      - backend
    container_name: todo
    build: 
      context: .
      dockerfile: ./docker/dockerfile.todo-service
    image: todo-service
    volumes:
      - .:/usr/src/app:rw
    ports:
      - "8081:8081"
    environment:
      - OTEL_SDK_DISABLED=false
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=staging
    x-develop:
      watch:
        - action: sync
          path: ./src/todo-service.ts
          target: /usr/src/app
#        - action: rebuild
#          path: package.json
  auth:
    networks:
      - backend
    container_name: auth
    build: 
      context: .
      dockerfile: ./docker/dockerfile.auth-service
    image: auth-service
    volumes:
      - .:/usr/src/app:rw
    environment:
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=staging
    x-develop:
      watch:
        - action: sync
          path: ./src/auth-service.ts
          target: /usr/src/app
        - action: rebuild
          path: package.json
  ui:
    networks:
      - backend
    container_name: ui
    build:
      context: .
      dockerfile: ./docker/dockerfile.ui-service
    image: ui-service
    volumes:
      - .:/usr/src/app:rw
    ports:
      - "8080:8080"
    environment:
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=staging
    x-develop:
      watch:
        - action: sync
          path: ./src/ui-service.ts
          target: /usr/src/app
        - action: rebuild
          path: package.json
  redis:
    networks:
      - backend
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
  redis-commander:
    networks:
      - backend
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8088:8081"
  zipkin:
    networks:
      - backend
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
  jaeger:
    networks:
      - backend
    container_name: jaeger
    image: jaegertracing/all-in-one
#    volumes:
#      - ./jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
#    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    ports:
      - "4318"
      - "16686:16686"
      - "14250:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
  prometheus:
    networks:
      - backend
    container_name: prometheus
    image: prom/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      # histogram_quantile(0.95, sum(rate(http_calls_bucket[1m])) by (le, route))
      # otel_http_calls_bucket
      # otel_http_calls_sum
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - "9090:9090"
#  mongo:
#    image: mongo:latest
#    container_name: mongo
#    restart: unless-stopped
#    env_file: .env
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
#      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
#    volumes:
#      - dbdata:/data/db
#    networks:
#      - graylog
#  mongo-express:
#    image: mongo-express
#    container_name: mongo-express
#    restart: unless-stopped
#    env_file: .env
#    ports:
#      - "8081:8081"
#    environment:
#      - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
#      - ME_CONFIG_BASICAUTH_USERNAME=$WEB_USER
#      - ME_CONFIG_BASICAUTH_PASSWORD=$WEB_PASS
#      - ME_CONFIG_MONGODB_URL=mongodb://$MONGO_USERNAME:$MONGO_PASSWORD@mongo:$MONGO_PORT/$MONGO_DB
#    depends_on:
#      - mongo
#    networks:
#      - graylog
#  # https://www.elastic.co/guide/en/elasticsearch/reference/7.10/docker.html
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
#    container_name: elasticsearch
#    environment:
#      - http.host=0.0.0.0
#      - transport.host=localhost
#      - network.host=0.0.0.0
#      - "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m"
#    networks:
#      - graylog
#  # https://graylog.org/
#  graylog:
#    image: graylog/graylog:5.1
#    container_name: graylog
#    environment:
#      # CHANGE ME (must be at least 16 characters)!
#      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
#      # Password: admin
#      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
#      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
#    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
#    networks:
#      - graylog
#    restart: always
#    depends_on:
#      - mongo
#      - elasticsearch
#    ports:
#      # Graylog web interface and REST API
#      - "9000:9000"
#      # Syslog TCP
#      - "1514:1514"
#      # Syslog UDP
#      - "1514:1514/udp"
#      # GELF TCP
#      - "12201:12201"
#      # GELF UDP
#      - "12201:12201/udp"
#  collector:
#    image: otel/opentelemetry-collector-contrib
#    container_name: otel-collector
#    volumes:
#      - ./collector/collector.yml:/etc/otel-collector-config.yaml
#    command: [ "--config=/etc/otel-collector-config.yaml" ]
#    ports:
#      - "8889:8889"
#      - "4317:4317"
#      - "4318:4318"
#    depends_on:
#      - jaeger
#      - prometheus
#  grafana:
#    networks:
#      - backend
#    container_name: grafana
#    image: grafana/grafana:latest
#    volumes:
#      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
#      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#    ports:
#      - "3000:3000"
networks:
  backend:
  graylog:
    driver: bridge
volumes:
  dbdata:
