version: "3.8"
services:
  todo:
    networks:
      - backend
    container_name: todo
    build: 
      context: .
      dockerfile: ./docker/dockerfile.todo-service
    image: todo-service
    volumes:
      - .:/usr/src/app:rw
    ports:
      - "8081:8081"
    environment:
      - OTEL_SDK_DISABLED=false
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=staging
    x-develop:
      watch:
        - action: sync
          path: ./src/todo-service.ts
          target: /usr/src/app
#        - action: rebuild
#          path: package.json
  auth:
    networks:
      - backend
    container_name: auth
    build: 
      context: .
      dockerfile: ./docker/dockerfile.auth-service
    image: auth-service
    volumes:
      - .:/usr/src/app:rw
    environment:
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=staging
    x-develop:
      watch:
        - action: sync
          path: ./src/auth-service.ts
          target: /usr/src/app
        - action: rebuild
          path: package.json
  ui:
    networks:
      - backend
    container_name: ui
    build:
      context: .
      dockerfile: ./docker/dockerfile.ui-service
    image: ui-service
    volumes:
      - .:/usr/src/app:rw
    ports:
      - "8080:8080"
    environment:
      - OTEL_LOG_LEVEL=ERROR
      - NODE_ENV=staging
    x-develop:
      watch:
        - action: sync
          path: ./src/ui-service.ts
          target: /usr/src/app
        - action: rebuild
          path: package.json
  redis:
    networks:
      - backend
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
  redis-commander:
    networks:
      - backend
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8088:8081"
  jaeger:
    networks:
      - backend
    container_name: jaeger
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"
      #- "14250:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
  zipkin:
    networks:
      - backend
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    environment:
      COLLECTOR_OTLP_ENABLED: true
  prometheus:
    networks:
      - backend
    container_name: prometheus
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - "9090:9090"
  collector:
    networks:
      - backend
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./collector/config.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the Collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger
      - prometheus
      - zipkin
networks:
  backend:
